DOING
------

NEXT
-----
- /bin/"command" does not work
- support for more complex command arguments
- run tests with sbt (js)?
- ls by default should not show all information use ls -l instead
- sbt publishLocal does not run tests
- should Ctrl-C be handled automatically by the shell?
- I don't like the use of shell.findFolder / findFile or virtualFolder.resolveFolder / resolveFile since
  the path must be built according to the file system path separator, parentFragment and separator
- add ps command to show running processes
- add kill command to kill a command (by root or owner)
- add killall (by root) command to kill all processes
- I don't like that completions (from Completions), for files and folders, lists all path and not only names.
  For example given the files:
  /usr/bin/one.txt
  /usr/bin/two.txt

  if I do completion for /usr/bin/ I get:
  /usr/bin/one.txt
  /usr/bin/two.txt

  but I want:
  one.txt
  two.txt

  But pay attention: the commands expect the full path.

- VirtualCommandArgument.complete must return an information to know if there is one precise match.
  For example if the argument is a file and it's an existent file, in that case and if there are more
  mandatory arguments, then I add a space to the result, so the user can digit the next arg.
- completions: if the proposals start with a common prefix longer than the argument of the user,
  replace the argument with that prefix.
  For example if I have the files:
  warehouse1
  warehouse2

  and I digit "cat ware" then tab, the command line must be "cat warehouse".
- use shapeless to make a type safe parser for command's arguments (look at project development/scala/shapeless)
- ls accepts a folder || file pattern

DONE
-----
- use VirtualCommandArguments in LsCommand
- use VirtualCommandArguments in CatCommand
- implement completion for FileArgument and FolderArgument
- use VirtualCommandArguments in CdCommand